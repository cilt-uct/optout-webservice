{% include 'html_start_survey.html' %}
    <div class="content">
        {% include 'header.html' %}
        
        <div class="container post">
            {% if (authenticated.a) %}
            <div class="row post-body">
                <div class="col-md-12 post-title">

                    <a href="{{out_link}}" target="_blank" type="button" class="btn btn-outline-secondary" style="float: right;">
                        <i class="fa fa-file-csv"></i>&nbsp;&nbsp;Download Dataset
                    </a>

                    <h3 id="result_title"></h3>
                    <p class="author"><span class="text-muted">{{result.created_at|date("F jS \\a\\t g:ia")}}</span></p>

                    <!--
                    3089 responses: XX.X% of ABCD students
                    <img src="./Lecture Recording Automated Setup_files/DASS_logo_Round_Colour.png" alt="DASS">
                    -->
                    <div class="graph_container">
                        <div class="div1 outline">
                            <h5>Access to devices</h5>
                            <div id="chart_access_device"></div>
                        </div>
                        <div class="div2 outline">
                            <h5>Access to internet</h5>
                            <div id="chart_access_internet"></div>
                        </div>
                        <div class="div3 outline">
                            <h5>Type of access to devices</h5>
                            <div id="chart_access_type"></div>
                        </div>
                        <div class="div4 outline">
                            <h5>Conditions of access to laptop or desktop computer</h5>
                            <div id="chart_engagement_acces"></div>
                        </div>
                        <div class="div5 outline">
                            <h5>Hours per day I am able to study online (after lockdown)</h5>
                            <div id="chart_engagement_hours"></div>
                        </div>
                        <div class="div6 outline">
                            <h5>Things I can do online ignoring data costs or usage caps (After lockdown ends)</h5>
                            <div id="chart_activities"></div>
                        </div>
                    </div>                        

                </div>
            </div>
            {% else %}
            <div class="row post-body justify-content-md-center">
                <div class="col-md-5 post-title">
                    <form id="loginForm" method="post" action="{{out_link}}">
                        <input type="hidden" id="type" name="type" value="login"/>
                        <div class="modal-body">
                            <div class="form-group row">
                                <div class="col-sm-12">
                                {% if err != 'none' %}
                                    <div class="alert alert-danger" role="alert">{{err}}</div>
                                {% endif %}
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="eid" id="eid" value="" placeholder="User ID" style="width:100%">
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-12">
                                    <input type="password" class="form-control" name="pw" id="pw" placeholder="Password" style="width:100%">
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Login</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
    {% if (authenticated.a) %}
    <script src="{{ asset('assets/js/jquery.min.js') }}"></script>
    <script src="{{ asset('assets/js/tmpl.js') }}"></script>
    <script src="{{ asset('assets/js/moment.min.js') }}"></script>
    <script src="{{ asset('assets/bootstrap/js/bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/amcharts4/core.js') }}"></script>
    <script src="{{ asset('assets/amcharts4/charts.js') }}"></script>
    <script src="{{ asset('assets/amcharts4/themes/animated.js') }}"></script>
    <script>
        function getObj(id, arr, key) { key = key || 'id'; var o = null; $.each(arr, function (i, el) { if (el[key] == id) { o=el; return; } }); return o; };
        Array.prototype.sum = function (prop) {
            var total = 0
            for ( var i = 0, _len = this.length; i < _len; i++ ) {
                total += parseInt(this[i][prop]);
            }
            return total
        }

        var cohort_response = {{result.cohort_response|json_encode|raw}};
        var survey_response = {{result.survey_response|json_encode|raw}};
        var survey_access_device = {{result.survey_access_device|json_encode|raw}};
        var survey_access_type = {{result.survey_access_type|json_encode|raw}};
        var survey_activities = {{result.survey_activities|json_encode|raw}};
        var survey_engagement_conditions = {{result.survey_engagement_conditions|json_encode|raw}};
        var survey_engagement_hours = {{result.survey_engagement_hours|json_encode|raw}};
   
        // Global chart settings
        var chart_colors = { "saturation": 0.4 };
        test =null

        function drawAccessDevices() {
            var total = survey_access_device.sum("cnt"),
                t_laptop_desktop = survey_access_device.filter(function(e){ return (e.Q3.indexOf("Desktop computer") >= 0) || (e.Q3.indexOf("Laptop") >= 0); }).sum("cnt");
            
            // create the chart and set the data
            var chart = am4core.create("chart_access_device", am4charts.XYChart);
            chart.data = [
                { "type" : "Laptop/Desktop", "per" : ((t_laptop_desktop / total) * 100).toFixed(1)},
                { "type" : "Smartphone", "per" :  ((survey_access_device.sum("Smartphone") / total) * 100).toFixed(1)},
                { "type" : "Tablet", "per" :  ((survey_access_device.sum("Tablet") / total) * 100).toFixed(1)},
                { "type" : "No Device", "per" :  ((survey_access_device.sum("Nothing") / total) * 100).toFixed(1)}
            ];
            chart.colors.list = [
                am4core.color("#67B7DC"),
                am4core.color("#67B7DC"),
                am4core.color("#67B7DC"),
                am4core.color("#B7241B"),                
                am4core.color("#67B7DC"),
                am4core.color("#67B7DC")
            ];

            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "type";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;
            categoryAxis.renderer.fontSize = 10;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                valueAxis.hide();

            var series1 = chart.series.push(new am4charts.ColumnSeries());
                series1.name = "Device";
                series1.dataFields.categoryX = "type";
                series1.dataFields.valueY = "per";

            // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set
            series1.columns.template.adapter.add("fill", function(fill, target) {
                return chart.colors.getIndex(target.dataItem.index);
            });
            series1.columns.template.adapter.add("stroke", function(fill, target) {
                return chart.colors.getIndex(target.dataItem.index);
            });

            // Add label
            var valueLabel = series1.bullets.push(new am4charts.LabelBullet());
                valueLabel.scale = 0.8;    
                valueLabel.label.text = "{valueY}%";
                valueLabel.label.dy = -10;
                valueLabel.label.hideOversized = false;
                valueLabel.label.truncate = false;
        }

        function drawAccessToInternet() {
            // Create chart instance
            var chart = am4core.create("chart_access_internet", am4charts.PieChart);
            chart.marginRight = 50;

            // Add and configure Series
            var pieSeries = chart.series.push(new am4charts.PieSeries());
            pieSeries.dataFields.value = "val";
            pieSeries.dataFields.category = "has";
            pieSeries.colors.list = [
                am4core.color("#265500"),
                am4core.color("#B7241B")
            ];

            // Let's cut a hole in our Pie chart the size of 30% the radius
            chart.innerRadius = am4core.percent(40);

            // Put a thick white border around each Slice
            pieSeries.slices.template.stroke = am4core.color("#fff");
            pieSeries.slices.template.strokeWidth = 2;
            pieSeries.slices.template.strokeOpacity = 1;
            pieSeries.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

            // Create a base filter effect (as if it's not there) for the hover to return to
            var shadow = pieSeries.slices.template.filters.push(new am4core.DropShadowFilter);
            shadow.opacity = 0;

            // Create hover state
            var hoverState = pieSeries.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

            // Slightly shift the shadow and make it more prominent on hover
            var hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter);
            hoverShadow.opacity = 0.7;
            hoverShadow.blur = 5;

            var total = survey_access_type.sum('cnt'),
                no_internet = survey_access_type.filter(function(i){ return (i.Q5.indexOf("No access to Internet") >= 0); }).sum("cnt")
                some = total - no_internet;

            chart.data = [{
                "has": "Yes",
                "val": (some / total) * 100
            },{
                "has": "No",
                "val": (no_internet / total) * 100,
            }];
        }

        function drawAccessType() {
            // Create chart instance
            var chart = am4core.create("chart_access_type", am4charts.PieChart);

            // Add and configure Series
            var pieSeries = chart.series.push(new am4charts.PieSeries());
            pieSeries.dataFields.value = "val";
            pieSeries.dataFields.category = "has";
            pieSeries.colors.list = [
                am4core.color("#68B7DC"),
                am4core.color("#6894DC"),
                am4core.color("#6871DC"),
                am4core.color("#B7241B")
            ];

            // Let's cut a hole in our Pie chart the size of 30% the radius
            chart.innerRadius = am4core.percent(40);

            // Put a thick white border around each Slice
            pieSeries.slices.template.stroke = am4core.color("#fff");
            pieSeries.slices.template.strokeWidth = 2;
            pieSeries.slices.template.strokeOpacity = 1;
            pieSeries.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

            // Create a base filter effect (as if it's not there) for the hover to return to
            var shadow = pieSeries.slices.template.filters.push(new am4core.DropShadowFilter);
            shadow.opacity = 0;

            // Create hover state
            var hoverState = pieSeries.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

            // Slightly shift the shadow and make it more prominent on hover
            var hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter);
            hoverShadow.opacity = 0.7;
            hoverShadow.blur = 5;

            // Wifi only: those who selected wifi and nothng else
            // Mobile only: those who selected mobile and nothing else
            // Wifi+Mobile: those who selected the two only
            // I dont have...: all that included "I dont have" regardless of what else they selected
            // Other: all those who included "other" and regardless of their other options (except "i dont have...") 

            var wifi_only = 'Wifi where I live (connected to home fibre, ADSL or a building network)',
                mobile_only = 'Mobile data (e.g. 3G, 4G, LTE) through a smartphone, dongle or mobile wifi router',
                wifi_mobile = 'Wifi where I live (connected to home fibre, ADSL or a building network),Mobile data (e.g. 3G, 4G, LTE) through a smartphone, dongle or mobile wifi router';

            var t_wifi_only = parseInt(getObj(wifi_only,survey_access_type,'Q5').Wifi, 10),
                t_mobile_only = parseInt(getObj(mobile_only,survey_access_type,'Q5').Mobile, 10),
                t_wifi_mobile = parseInt(getObj(wifi_mobile,survey_access_type,'Q5').Wifi, 10),
                t_other = survey_access_type.filter(function(i){ return (i.Q5.indexOf("Other") >=0) &&  (i.Q5.indexOf("No access to Internet") == -1); }).sum("Other"),
                total = t_wifi_only + t_mobile_only + t_wifi_mobile + t_other;
                    
            chart.data = [{
                "has": "Wifi only",
                "val": ( t_wifi_only / total) * 100
            },{
                "has": "Mobile only",
                "val": (t_mobile_only / total) * 100
            },{
                "has": "Wifi + Mobile",
                "val": (t_wifi_mobile / total) * 100
            },{
                "has": "Other",
                "val": (t_other / total) * 100
            }];


        }

        function drawEngagementHours() {
            var total = survey_engagement_hours.sum("cnt");
            survey_engagement_hours.map(function(e){
                e.Q7 = (e.Q7 == "0" ? "< 1" : e.Q7);
                e.Q7 = (e.Q7 == "10" ? "+ 10" : e.Q7);
                e.cnt = parseInt(e.cnt, 10);
                e.per = ((e.cnt / total) * 100).toFixed(1);
            });

            console.log(survey_engagement_hours);
            
            // create the chart and set the data
            var chart = am4core.create("chart_engagement_hours", am4charts.XYChart);
            chart.data = survey_engagement_hours;

            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "Q7";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                valueAxis.hide();

            var series1 = chart.series.push(new am4charts.ColumnSeries());
                series1.name = "Hours";
                series1.dataFields.categoryX = "Q7";
                series1.dataFields.valueY = "cnt";
                series1.dataFields.valuePer = "per";

            // Add label
            var valueLabel = series1.bullets.push(new am4charts.LabelBullet());
                valueLabel.scale = 0.8;    
                valueLabel.label.text = "{valuePer}%";
                valueLabel.label.dy = -10;
                valueLabel.label.hideOversized = false;
                valueLabel.label.truncate = false;
        }

        function drawEngagement() {
            var total = survey_engagement_conditions.sum('cnt');
            
            // create the chart and set the data
            var chart = am4core.create("chart_engagement_acces", am4charts.XYChart);
            chart.data = [
                { "type" : "Own Laptop/Desktop", "per" : ((survey_engagement_conditions.sum("own_laptop_desktop") / total) * 100).toFixed(1)},
                { "type" : "I don't have any", "per" :  ((survey_engagement_conditions.sum("Nothing") / total) * 100).toFixed(1)},
                { "type" : "I share mine with others", "per" :  ((survey_engagement_conditions.sum("share_laptop_desktop") / total) * 100).toFixed(1)},
                { "type" : "I borrow from others", "per" :  ((survey_engagement_conditions.sum("borrow_laptop_desktop") / total) * 100).toFixed(1)}
            ];
            chart.colors.list = [
                am4core.color("#67B7DC"),
                am4core.color("#B7241B"),
                am4core.color("#67B7DC"),
                am4core.color("#67B7DC"),
                am4core.color("#67B7DC"),
                am4core.color("#67B7DC")
            ];
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "type";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;
            categoryAxis.renderer.fontSize = 10;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                valueAxis.hide();

            var series1 = chart.series.push(new am4charts.ColumnSeries());
                series1.name = "Device";
                series1.dataFields.categoryX = "type";
                series1.dataFields.valueY = "per";

            // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set
            series1.columns.template.adapter.add("fill", function(fill, target) {
                return chart.colors.getIndex(target.dataItem.index);
            });
            series1.columns.template.adapter.add("stroke", function(fill, target) {
                return chart.colors.getIndex(target.dataItem.index);
            });

            // Add label
            var valueLabel = series1.bullets.push(new am4charts.LabelBullet());
                valueLabel.scale = 0.8;    
                valueLabel.label.text = "{valueY}%";
                valueLabel.label.dy = -10;
                valueLabel.label.hideOversized = false;
                valueLabel.label.truncate = false;
        }

        function drawActivities() {
            var total = survey_activities.filter(function(e){ return e.Q8 != ""; }).sum('cnt');
            
            // create the chart and set the data
            var chart = am4core.create("chart_activities", am4charts.XYChart);
            chart.minHeight = 240;
            chart.data = [
                { 
                    "type" : "Login to Vula, read announcements, join a chatroom", 
                    "per" : ((survey_activities.sum("login_vula") / total) * 100).toFixed(1)
                }
                ,{ 
                    "type" : "Download a reading, notes or presentation from Vula (e.g. PDFs, Powerpoints, up to 10MB)", 
                    "per" : ((survey_activities.sum("download") / total) * 100).toFixed(1)
                }
                ,{ 
                    "type" : "Search for and download learning or research materials online or through UCT Library", 
                    "per" : ((survey_activities.sum("search") / total) * 100).toFixed(1)
                }
               ,{ 
                    "type" : "Download a lecture video (up to 500MB)", 
                    "per" : ((survey_activities.sum("download_500") / total) * 100).toFixed(1)
                }
                ,{ 
                    "type" : "Play a lecture video online (without buffering)", 
                    "per" : ((survey_activities.sum("stream") / total) * 100).toFixed(1)
                }
                ,{ 
                    "type" : "Voice call (e.g. Whatsapp voice call, Skype)", 
                    "per" : ((survey_activities.sum("voice") / total) * 100).toFixed(1)
                }                                                                      
                ,{ 
                    "type" : "Live video call or meeting (e.g. WhatsApp video, Skype, Zoom, Teams, Adobe Connect)", 
                    "per" : ((survey_activities.sum("video") / total) * 100).toFixed(1)
                } 
                // ,{ 
                //     "type" : "I don't know", 
                //     "per" : ((survey_activities.sum("other") / total) * 100).toFixed(1)
                // } 
            ];
            var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "type";
            // categoryAxis.renderer.inversed = true;
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 20;
            categoryAxis.renderer.fontSize = 10;

            var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                // valueAxis.renderer.opposite = true;
                valueAxis.hide();

            var series1 = chart.series.push(new am4charts.ColumnSeries());
                series1.dataFields.valueX = "per";
                series1.dataFields.categoryY = "type";

            // Add label
            var valueLabel = series1.bullets.push(new am4charts.LabelBullet());
                valueLabel.scale = 0.8;    
                valueLabel.label.text = "{valueX}%";
                valueLabel.label.horizontalCenter = "left";
                valueLabel.label.dx = 10;
                valueLabel.label.hideOversized = false;
                valueLabel.label.truncate = false;
        }

        $(function() {

            am4core.ready(function() {
                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                drawAccessDevices();
                drawAccessToInternet();
                drawAccessType();

                drawEngagementHours();
                drawEngagement();

                drawActivities();
            }); // end am4core.ready()

            cohort_response.map(function(e){ e.cnt = parseInt(e.cnt,10); });
            survey_response.map(function(e){ e.cnt = parseInt(e.cnt,10); });

            var total = survey_response.sum("cnt"),
                o_cohort_under = getObj('Undergraduate',cohort_response,'lvl'),
                o_cohort_post = getObj('Postgraduate',cohort_response,'lvl'),
                o_survey_under = getObj('Undergraduate',survey_response,'lvl'),
                o_survey_post = getObj('Postgraduate',survey_response,'lvl'),
                under = null, post = null;

                if (o_cohort_under && o_survey_under) {
                    under = ((o_survey_under.cnt / o_cohort_under.cnt) * 100).toFixed(1);
                }
                if (o_cohort_post && o_survey_post) {
                    post = ((o_survey_post.cnt / o_cohort_post.cnt) * 100).toFixed(1);
                }
            
            var cohort_total = (o_cohort_under ? o_cohort_under.cnt : 0) + (o_cohort_post ? o_cohort_post.cnt : 0);
            var survey_total = (o_survey_under ? o_survey_under.cnt : 0) + (o_survey_post ? o_survey_post.cnt : 0);

            per = ((survey_total / cohort_total) * 100).toFixed(1);
            $("#result_title").html(tmpl('tmpl-page-title', {'no': new Intl.NumberFormat('en-US').format(total), "per": per, "cls": "Test"}));

            $("#survey_complete").html(tmpl('tmpl-graph-text', {'cls': 'text-L', 'no': new Intl.NumberFormat('en-US').format(total), 'txt': 'Responses' }));
            if (under > 0) {
                $("#survey_under").html(tmpl('tmpl-graph-text', {'cls': 'text-M', 'no': under + '%', 'txt': 'Undergraduate Response Rate' }));
            } else {
                $("#survey_under").html(tmpl('tmpl-graph-text', {'cls': 'text-M', 'no': '-', 'txt': 'Undergraduate Response Rate' }));
            }
            if (post > 0) {
                $("#survey_post").html(tmpl('tmpl-graph-text', {'cls': 'text-S', 'no': post + '%', 'txt': 'Postgraduate Response Rate' }));
            } else {
                $("#survey_post").html(tmpl('tmpl-graph-text', {'cls': 'text-S', 'no': '-', 'txt': 'Postgraduate Response Rate' }));
            }
        });
    </script>
    {{ source('result_template.html') }}
    {% endif %}
{% include 'footer.html' %}
{% include 'html_end.html' %}
